import "reflect-metadata";
import { AuthController } from "./auth/auth.controller";
import { AuthRepository } from "./auth/auth.repository";
import { AuthService } from "./auth/auth.service";
import { UsersController } from "./users/users.controller";
import { UserRepository } from "./users/users.repository";
import { UserService } from "./users/user.service";
import { UsersQueryRepository } from "./users/usersQuery.repository";
import { CommentsController } from "./comments/comments.controller";
import { CommentRepository } from "./comments/comment.repository";
import { CommentService } from "./comments/comment.service";
import { CommentQueryRepository } from "./comments/commentQuery.repository";
import { BlogsRepository } from "./blogs/blogs.repository";
import { BlogService } from "./blogs/blog.service";
import { BlogsController } from "./blogs/blogs.controller";
import { BlogsQueryRepository } from "./blogs/blogsQuery.repository";
import { PostsController } from "./posts/posts.controller";
import { PostsRepository } from "./posts/posts.repository";
import { PostService } from "./posts/post.service";
import { PostsQueryRepository } from "./posts/postsQuery.repository";
import { TestingController } from "./testing/testing.controller";
import { SecurityController } from "./security/security.controller";
import { SecurityRepository } from "./security/security.repository";
import { SecurityService } from "./security/security.service";
import { NodemailerService } from "./common/adapters/nodemailer.service";
import { TokenService } from "./common/services/token.service";
import { SecurityQueryRepository } from "./security/securityQuery.repository";
import { RateLimitService } from "./common/services/rateLimit.service";
import { LikeHelper } from "./like/like.helper";
import { Container } from "inversify";

export const rateLimitService = new RateLimitService();
export const testingController = new TestingController();

export const container = new Container();

container.bind<AuthRepository>(AuthRepository).to(AuthRepository);
container.bind<SecurityRepository>(SecurityRepository).to(SecurityRepository);
container.bind<UserRepository>(UserRepository).to(UserRepository);
container.bind<BlogsRepository>(BlogsRepository).to(BlogsRepository);
container.bind<PostsRepository>(PostsRepository).to(PostsRepository);
container.bind<CommentRepository>(CommentRepository).to(CommentRepository);
container.bind<NodemailerService>(NodemailerService).to(NodemailerService);
container.bind<TokenService>(TokenService).to(TokenService);
container.bind<LikeHelper>(LikeHelper).to(LikeHelper);
container.bind<AuthService>(AuthService).to(AuthService);
container.bind<SecurityService>(SecurityService).to(SecurityService);
container.bind<UserService>(UserService).to(UserService);
container.bind<BlogService>(BlogService).to(BlogService);
container.bind<PostService>(PostService).to(PostService);
container.bind<CommentService>(CommentService).to(CommentService);
container.bind<SecurityQueryRepository>(SecurityQueryRepository).to(SecurityQueryRepository);
container.bind<UsersQueryRepository>(UsersQueryRepository).to(UsersQueryRepository);
container.bind<BlogsQueryRepository>(BlogsQueryRepository).to(BlogsQueryRepository);
container.bind<PostsQueryRepository>(PostsQueryRepository).to(PostsQueryRepository);
container.bind<CommentQueryRepository>(CommentQueryRepository).to(CommentQueryRepository);
container.bind<AuthController>(AuthController).to(AuthController);
container.bind<SecurityController>(SecurityController).to(SecurityController);
container.bind<UsersController>(UsersController).to(UsersController);
container.bind<BlogsController>(BlogsController).to(BlogsController);
container.bind<PostsController>(PostsController).to(PostsController);
container.bind<CommentsController>(CommentsController).to(CommentsController);
